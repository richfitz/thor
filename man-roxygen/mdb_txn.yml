id:
  short: >-
    Return the mdb internal id of the transaction
  value: An integer
  mdb: mdb_txn_id

stat:
  short: >-
    Brief statistics about the database.  This is the same as
    \code{\link{mdb_env}}'s \code{stat()} but applying to the
    transaction
  value: >-
    An integer vector with elements \code{psize} (the size of a
    database page), \code{depth} (depth of the B-tree),
    \code{brancb_pages} (number of internal non-leaf) pages),
    \code{leaf_pages} (number of leaf pages), \code{overflow_pages}
    (number of overflow pages) and \code{entries} (number of data
    items).
  mdb: mdb_stat

commit:
  short: >-
    Commit all changes made in this transaction to the database, and
    invalidate the transaction, and any cursors belonging to it (i.e.,
    once committed the transaction cannot be used again)
  value: Nothing, called for its side effects only
  mdb: mdb_txn_commit

abort:
  short: >-
    Abandon all changes made in this transaction to the database, and
    invalidate the transaction, and any cursors belonging to it (i.e.,
    once aborted the transaction cannot be used again).  For read-only
    transactions there is no practical difference between abort and
    commit, except that using \code{abort} allows the transaction to
    be recycled more efficiently.
  params:
    cache: >-
      Logical, indicating if a read-only transaction should be cached
      for recycling
  value: Nothing, called for its side effects only
  mdb: mdb_txn_abort

get:
  short: Retrieve a value from the database
  params:
    key: A string (or raw vector) - the key to get
    missing_is_error: >-
      Logical, indicating if a missing value is an error (by default
      it is).  Alternatively, with \code{missing_is_error = FALSE}, a
      missing value will return \code{NULL}.  Because no value can be
      \code{NULL} (all values must have nonzero length) a \code{NULL}
      is unambiguously missing.
    as_proxy: >-
      Return a "proxy" object, which defers doing a copy into R.  See
      \code{\link{mdb_proxy}} for more information.
    as_raw: >-
      Either \code{NULL}, or a logical, to indicate the result type
      required.  With \code{as_raw = NULL}, the default, the value
      will be returned as a string if possible.  If not possible it
      will return a raw vector.  With \code{as_raw = TRUE},
      \code{get()} will \emph{always} return a raw vector, even when
      it is possibly to represent the value as a string.  If
      \code{as_raw = FALSE}, \code{get} will return a string, but
      throw an error if this is not possible.  This is discussed in
      more detail in the thor vignette (\code{vignette("thor")})
  mdb: mdb_get

put:
  short: >-
    Put values into the database.  In other systems, this might be
    called "\code{set}".
  params:
    key: The name of the key (string or raw vector)
    value: The value to save (string or raw vector)
    overwrite: >-
      Logical - when \code{TRUE} it will overwrite existing data; when
      \code{FALSE} throw an error
    append: >-
      Logical - when \code{TRUE}, append the given key/value to the
      end of the database.  This option allows fast bulk loading when
      keys are already known to be in the correct order.  But if you
      load unsorted keys with \code{append = TRUE} an error will be
      thrown
  mdb: mdb_put

del:
  short: >-
    Remove a key/value pair from the database
  params:
    key: The name of the key (string or raw vector)
  value: A scalar logical, indicating if the value was deleted
  mdb: mdb_del

exists:
  short: Test if a key exists in the database.
  details: >-
    This is an extension of the raw LMDB API and works by using
    \code{mdb_get} for each key (which for lmdb need not copy data)
    and then testing whether the return value is \code{MDB_SUCCESS} or
    \code{MDB_NOTFOUND}.
  params:
    key: >-
      The name of the key to test (string or raw vector).  Unlike
      \code{get}, \code{put} and \code{del} (but like \code{mget},
      \code{mput} and \code{mdel}), \code{exists} is
      \emph{vectorised}.  So the input here can be; a character vector
      of any length (returning the same length logical vector), a raw
      vector (representing one key, returning a scalar logical) or a
      \code{list} with each element being either a scalar character or
      a raw vector, returning a logical the same length as the list.
  value: A logical vector

list:
  short: List keys in the database
  params:
    starts_with: >-
      Optionally, a prefix for all strings.  Note that is not a
      regular expression or a filename glob.  Using \code{foo} will
      match \code{foo}, \code{foo:bar} and \code{foobar} but not
      \code{fo} or \code{FOO}.  Because LMDB stores keys in a sorted
      tree, using a prefix can greatly reduce the number of keys that
      need to be tested.
    as_raw: >-
      Same interpretation as \code{as_raw} in \code{$get()} but with a
      different default.  It is expected that most of the time keys
      will be strings, so by default we'll try and return a character
      vector \code{as_raw = FALSE}.  Change the default if your
      database contains raw keys.
    size: >-
      For use with \code{starts_with}, optionally a guess at the number
      of keys that would be returned.  with \code{starts_with = NULL}
      we can look the number of keys up directly so this is ignored.

mget:
  short: >-
    Get values for multiple keys at once (like \code{$get} but
    vectorised over \code{key})
  params:
    key: >-
      The keys to get values for.  Zero, one or more keys are allowed.
    as_proxy: >-
      Logical, indicating if a list of \code{\link{mdb_proxy}} objects
      should be returned.
    as_raw: >-
      As for \code{$get()}, logical (or \code{NULL}) indicating if raw
      or string output is expected or desired.
  return: >-
    A list, unless \code{as_proxy = FALSE, as_raw = FALSE} (in which
    case a character vector), with the same length as the number of
    keys.  This is so that the type is entirely determined by the
    input arguments and not by the contents of the database.  Missing
    values are never errors, but are \code{NULL} if returning a list
    and \code{""} if returning  a charcater vector.

mput:
  short: >-
    Put multiple values into the database (like \code{$put} but
    vectorised over \code{key}/\code{value}).
  details: >-
    The implementation simply calls \code{mdb_put} repeatedly (but with
    a single round of error checking) so duplicate \code{key} entries
    will result in the last key winning.
  params:
    key: >-
      The keys to set
    value: >-
      The values to set against these keys.  Must be the same length
      as \code{key}.
    overwrite: As for \code{$put}
    append: As for \code{$put}

mdel:
  short: >-
    Delete multiple values from the database (like \code{$del} but
    vectorised over \code{key}).
  params:
    key: The keys to delete
  value: >-
    A logical vector, the same length as \code{key}, indicating if
    each key was deleted.

cursor:
  short: >-
    Create a \code{\link{mdb_cursor}} object in this transaction.
    This can be used for more powerful database interactions.
  value: >-
    A \code{\link{mdb_cursor}} object.
  mdb: mdb_cursor_open

cmp:
  short: >-
    Compare two keys for ordering
  params:
    a: A key (string or raw); it need not be in the database
    b: A key to compare with b (string or raw)
  value: >-
    A scalar integer, being -1 (if a < b), 0 (if a == b) or 1 (if a >
    b).
  mdb: mdb_cmp

replace:
  short: >-
    Use a temporary cursor to replace an item; this function will
    replace the data held at \code{key} and return the previous value
    (or \code{NULL} if it doesn't exist).  See
    \code{\link{mdb_cursor}} for fuller documentation.
  params:
    key: The key to replace
    value: The new value value to st \code{key} to
    as_raw: For the returned value, how should the data be returned?
  value: >-
    As for \code{$get()}, a single data item as either a string or raw
    vector.

pop:
  short: >-
    Use a temporary cursor to "pop" an item; this function will delete
    an item but return the value that it had as it deletes it.
  params:
    key: The key to pop
    as_raw: For the returned value, how should the data be returned?
  value: >-
    As for \code{$get()}, a single data item as either a string or raw
    vector.
