is_valid:
  short: >-
    Test if cursor is valid (i.e., that it is pointing at data that
    can be retrieved).  Cursors start off invalid until placed (e.g.,
    \code{first}, \code{last}) and can be invalidated by moving off
    the beginning or end of the database.
  return: Logical scalar

close:
  short: >-
    Close the cursor
  value: None, called for side effects only
  mdb: mdb_cursor_close

key:
  short: >-
    Return the current key
  params:
    as_proxy: &as_proxy >-
      Return as an \code{\link{mdb_proxy}} object?
    as_raw: &as_raw >-
      Return the value as raw.  With a value of \code{NULL} it will
      return a string if possible (i.e., if there are no null bytes)
      and a raw vector otherwise.  With \code{as_raw = TRUE} we always
      return a raw vector.  With \code{as_raw = FALSE} we always
      return a string, or throw an error if this is not possible.

value:
  short: >-
    Return the current value
  params:
    as_proxy: *as_proxy
    as_raw: *as_raw

first:
  short: >-
    Move the cursor to the first item in the database
  detail: This is like \code{mdb_cursor_get} with \code{MDB_FIRST}
  value: &is_valid >-
    Invisibly, a logical indicating if the cursor position is valid,
    but primarily called for side effects

last:
  short: >-
    Move the cursor to the last item in the database
  detail: This is like \code{mdb_cursor_get} with \code{MDB_LAST}
  value: *is_valid

move_prev:
  short: >-
    Move the cursor to the previous item in the database.  If called
    while at the first item in the database, this will invalidate the
    cursor position.
  detail: This is like \code{mdb_cursor_get} with \code{MDB_PREV}
  value: *is_valid

move_next:
  short: >-
    Move the cursor to the next item in the database.  If called
    while at the last item in the database, this will invalidate the
    cursor position.
  detail: This is like \code{mdb_cursor_get} with \code{MDB_NEXT}
  value: *is_valid

move_to:
  short: >-
    Move the cursor to the item in the database with key \code{key}.
    If \code{key} does not exist, this will invalidate the cursor
    position.
  params:
    key: Key to move to (string or raw)
  detail: This is like \code{mdb_cursor_get} with \code{MDB_SET_KEY}
  value: *is_valid

seek:
  short: >-
    Move the cursor to the item in the database with key equal to or
    greater than \code{key}.  If \code{key} does not exist and no key
    with a key greater than \code{key} exists, this will invalidate
    the cursor position.
  params:
    key: Key to seek (string or raw)
  detail: This is like \code{mdb_cursor_get} with \code{MDB_SET_RANGE}
  value: *is_valid

del:
  short: >-
    Delete the current key
  value: >-
    Logical, indicating if a value was deleted (which will be
    \code{TRUE} if the cursor was valid before this operation).
    Primarily called for its side effect of deleting the data.  After
    deletion, we call \code{mdb_cursor_get} with
    \code{MDB_GET_CURRENT} which will re-validate the cursor.
  mdb: mdb_cursor_del

put:
  short: Store data using the cursor
  params:
    key: The key (string or raw)
    value: The value (string or raw)
    overwrite: As for \code{\link{mdb_txn}} \code{$put}
    append: As for \code{\link{mdb_txn}} \code{$put}
  value: >-
    Logical scalar, indicating if data was previously stored at this key
  mdb: mdb_cursor_put

replace:
  short: >-
    Replace a key's current value with a new value, returning the old
    value.  This is like doing a \code{get()} followed by a \code{put}
    within a transaction.
  params:
    key: The key to replace
    value: The new value to store
    as_raw: *as_raw

pop:
  short: >-
    Delete a key's value, returning the value just before it was
    deleted.  This is like doing a \code{get} followed by a \code{del}
    within a transaction.
  params:
    key: The key to delete
    as_raw: *as_raw
  value: &ret_value >-
    Depending on \code{as_raw} and if there is a value stored,
    \code{NULL}, a character string or a raw vector

get:
  short: >-
    Move to a key and fetch the value
  params:
    key: The key to find (string or raw)
    as_proxy: *as_proxy
    as_raw: *as_raw
  value: *ret_value
